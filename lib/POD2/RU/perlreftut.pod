
=encoding utf8

=head1 NAME/НАИМЕНОВАНИЕ

perlreftut - очень короткое руководство по ссылкам, которое написал Марк

=head1 ОПИСАНИЕ

Одним из наиболее важных новых функций в Perl 5 была возможность
управления сложными структурами данных такими, как многомерные массивы и
вложенные хэши. Чтобы сделать это в Perl 5 появилась возможность
 называемая 'ссылки' ('references') и использование ссылок является ключом к управлению сложными,
структурированными данными в Perl. К сожалению есть много смешного синтаксиса
для изучения, и главная страница маны (perlref) может быть сложна для изучения. Это Руководство - 
 довольно полное, и иногда люди находят и здесь проблемы, потому что
 иногда бывает трудно сказать, что важно, а что нет.

К счастью вам только нужно знать только 10% того, что находится на главной странице (perlref), чтобы получить 
90% выгоды. Эта страница покажет вам, что это за 10%.

=head1 Кому нужны сложные структуры данных?

Все время вставала проблема представления данных в виде хэша, значениями которого являются списки. 
В Perl есть хэши, конечно, но значениями хэша должны быть скаляры;
они не могут быть списками.

Для чего может понадобиться хэш списков?
Возьмем простой пример: у вас есть файл с названиями городов и стран:

	Chicago, USA
	Frankfurt, Germany
	Berlin, Germany
	Washington, USA
	Helsinki, Finland
	New York, USA

и вы хотите получить на выходе следующее: название страны, затем в алфавитном порядке список городов в этой стране:

	Finland: Helsinki.
	Germany: Berlin, Frankfurt.
	USA:  Chicago, New York, Washington.

Естественный путь сделать это - создать хэш, ключи которого - названия стран.
Значением каждого ключа будет список городов этой страны. 
При чтении каждой входящей строки надо разделить ее на страну и город,
затем добавить город в список городов данной страны, 
если такого города в списке еще не существует.
После завершения чтения пройтись по хэшу в цикле, 
сортируя каждый список городов перед печатью.

Если значениями хэша не могут быть списки, то вы проиграли.
Возможно, вам придется объединить названия всех городов в одну строку, 
затем, перед печатью разбить строку в список, 
который нужно отсортировать и преобразовать снова в строку.
Это добавляет беспорядка и ошибок. И это нас расстраивает, 
потому что в Perl'е уже есть превосходные списки,
которые могли бы решить данную проблему, и, если вы можете, то
используйте их.

=head1 Решение

Ко времени обкатки Perl 5 мы уже завязли в этой концепции: 
Значениями хэша могут быть только скаляры. Решение пришло в виде ссылок.

Ссылка — это скалярная величина, которая I<ссылается> на весь массив или на весь хэш (или еще на что-нибудь). Имена — один из видов ссылок, которые вам уже известны. Подумайте о президенте США: грязный, неудобный мешок с кровью и костями. Но чтобы говорить о нем, или представить его в компьютерной программе, все что для этого нужно - удобная скалярная строка "Барак Обама".

Ссылки в Perl похожи на имена для списков или хэшей. Это частные, внутренние имена perl программы, поэтому можно быть уверенным, что они однозначны. В отличие от "Барака Обама", ссылка ссылается только на один объект, и вы всегда знаете, на какой. Если у вас есть ссылка
в массив, то весь массив можно восстановить из нее. Если у вас есть
ссылка на хэш, то вы можете восстановить весь хэш. 
Но ссылка по-прежнему является простым, компактным скалярным значением.

Не может быть хэша, значения которого - массивы; значениями хэша могут быть только скалярами. Мы опять застряли. Но одна ссылка может указывать на целый массив, и при этом ссылка остается скаляром, так что можно создать хэш ссылок на массивы, и это будет работать, как хэш массивов, и будет таким же полезным, как и хэш массивов.

Мы вернемся к проблеме городов и стран позже, после того, как рассмотрим синтаксис управления ссылками.

=head1 Синтаксис

Есть только два способа создать ссылку и только два способа использовать её.

=head2 Создание ссылок

=head3 B<Правило создания 1>

Поместив перед переменной обратный слеш C<\>, вы получите ссылку на эту переменную.

    $aref = \@array;         # $aref теперь содержит ссылку на @array
    $href = \%hash;          # $href теперь содержит ссылку на %hash
    $sref = \$scalar;        # $sref теперь содержит ссылку на $scalar

После того, как ссылка сохранена в переменной, такой как $aref или $href,
ее можно копировать или просто хранить, как любую другую скалярную величину:

    $xy = $aref;             # $xy теперь содержит ссылку на to @array
    $p[3] = $href;           # $p[3] теперь содержит ссылку на %hash
    $z = $p[3];              # $z теперь содержит ссылку на %hash

Эти примеры показывают, как сделать ссылки на именованные переменные.
Может быть, вы захотите создать массив или хэш, у которого нет имени,
по аналогии с возможностью использовать строку C<"\n"> или число 80, 
не сохраняя их в именованной переменной.

B<Правило создания 2>

Конструкция [ элемент1, элемент2, ... ] создает новый анонимный 
массив и возвращает ссылку на этот массив. Конструкция { элемент1 => элемент2, ... } 
создает новый анонимный хэш и возвращает ссылку на этот хэш.

C<[ ЭЛЕМЕНТЫ ]> создает новый анонимный массив и возвращает ссылку на этот массив.
C<{ ЭЛЕМЕНТЫ }> создает новый анонимный хэш и возвращает ссылку на этот хэш.

    $aref = [ 1, "foo", undef, 13 ];
    # $aref теперь содержит ссылку на массив

    $href = { APR => 4, AUG => 8 };
    # $href теперь содержит ссылку на хэш

Ссылки, которые вы получаете по правилу 2, такие же, как и те, которые получаются по правилу 1:

	# Это:
	$aref = [ 1, 2, 3 ];

	# Делает то же самое, что и это:
	@array = (1, 2, 3);
	$aref = \@array;

Первая строка — сокращение последующих двух строк, кроме того, 
что она не создает лишней переменной массива C<@array>.

Если вы напишете просто C<[]>, вы получите новый пустой анонимный массив. 
Если вы напишите просто C<{}>, вы получите новый пустой анонимный хэш.

=head2 Использование ссылок

Что можно сделать со ссылкой после её создания ? 
Мы уже видели, что её можно хранить как скалярную величину и 
получить её значение. Есть только два способа её использования:

=head3 B<Правило использования 1>

Можно использовать ссылку на массив в фигурных скобках,
вместо имени массива. Например, C<@{$aref}> вместо  C<@array>.

Вот некоторые примеры этого:

Массивы:

	@a		@{$aref}		Массив
	reverse @a	reverse @{$aref}	Массив в обратном порядке
	$a[3]		${$aref}[3]		Элемент массива
	$a[3] = 17;	${$aref}[3] = 17	Присваивание значения элементу массива

В каждой строке два выражения, которые делают то же самое.
В левой версии работают с массивом C<@a>. 
В правой версии работают с массивом, на который ссылается C<$aref>.
После нахождения массива оба варианта выполняют одинаковые операции.

Использование ссылки на хэш I<точно> такое же:

	%h		%{$href}	      Хэш
	keys %h		keys %{$href}	      Получение ключей хэша
	$h{'red'}	${$href}{'red'}	      Элемент хэша
	$h{'red'} = 17	${$href}{'red'} = 17  Присвоение значения элементу

Все что можно сделать со ссылкой, делается по B<Правилу использования 1>.
Вы просто пишите код на Perl, который делает то, что нужно с обычным
массивом или хэшем, а затем заменяете имя массива или хэша C<{$ссылкой}>.
"Как перебрать элементы массива, если у меня есть ссылка ?" 
Чтобы перебрать элементы массива, нужно написать


        for my $element (@array) {
           ...
        }

затем замените имя массива C<@array> ссылкой:

        for my $element (@{$aref}) {
           ...
        }

"Как распечатать содержимое хэша, если у меня есть только ссылка?"
Сначала напишем код для распечатки хэша:

        for my $key (keys %hash) {
          print "$key => $hash{$key}\n";
        }

И затем заменяем имя хэша ссылкой:

        for my $key (keys %{$href}) {
          print "$key => ${$href}{$key}\n";
        }

=head3 B<Правило использования 2>

B<Правило использования 1> — это все, что вам действительно нужно,
потому что оно описывает абсолютно все действия со ссылкой.
Но чаще всего приходится извлекать единственный элемент массива
или хэша, и запись по B<Правилу использования 1> громоздка.
Поэтому есть несколько сокращений.

C<${$aref}[3]>  слишком трудно читать, так что вы можете писать $aref->[3]
вместо этого.

C<${$href}{red}> слишком трудно читать, так что вы можете написать
C<< $href->{red} >> вместо этого.

Если C<$aref> содержит ссылку на массив, тогда C<< $aref->[3] >> — 
четвертый элемент массива. Не перепутайте его с  C<$aref[3]>, 
что есть четвертый элемент совершенно другого массива,
обманчиво названного C<@aref>.
 C<$aref> и C<@aref> не связаны также, как и C<$item> и C<@item> .

Аналогичным образом C<< $href->{'red'} >> — является частью хэша, на который указывает скалярная переменная $href,
возможно даже безымянного.
C<$href{'red'}> часть обманчиво названного хэша C<%href>. 
Легко забыть вставить  C<< -> >> и в этом случае вы получите странные результаты, когда программа будет извлекать элементы совершенно неожиданных массивов и хэшей, которые вы совсем не хотели использовать.

=head2 Пример

Небольшой пример того, как все это можно использовать.

Во-первых, следует помнить, что C<[1, 2, 3]> создает анонимный массив, 
содержащий C<(1, 2, 3)>, и возвращает ссылку на этот массив.

Теперь подумайте о

	@a = ( [1, 2, 3],
               [4, 5, 6],
	       [7, 8, 9]
             );

@a представляет собой массив из трех элементов, каждый из которых является ссылкой на другой массив.

C<$a[1]> одна из этих ссылок. Она ссылается на массив, содержащий
(4, 5, 6), и, так как это ссылка на массив, то по B<Правилу использования 2>
мы можем написать C<< $a[1]->[2] >>, чтобы получить третий элемент этого массива.
C<< $a[1]->[2] >> это 6. Аналогично, C<< $a[0]->[1] >> это 2. То, что у нас есть
похоже на двумерный массив, можно писать  C<< $a[СТРОКА]->[КОЛОНКА] >>, чтобы
получить или внести элемент в любую строку любого столбца массива.

Но эта нотация все еще громоздка, поэтому есть еще одно сокращение:

=head2 Правило стрелки

Между двумя B<индексами> стрелка не обязательна.

Вместо C<< $a[1]->[2] >>, мы можем написать C<$a[1][2]>; это значит тоже самое. 
Аналогично, вместо C<< $a[0]->[1] = 23 >>, мы можем написать C<$a[0][1] = 23>.

Теперь это в самом деле выглядит, как двумерный массив!

Из этого видно, почему важны стрелки. 
Без них пришлось бы писать  C<${$a[1]}[2]> вместо C<$a[1][2]>. 
Для трехмерных массивов можно писать C<$x[2][3][5]>
вместо нечитаемого C<${${$x[2]}[3]}[5]>.

=head1 Решение

Теперь — решение поставленнного в начале вопроса о переформатировании названий городов и стран.

    1   my %table;

    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @{$table{$country}}, $city;
    7   }

    8   foreach $country (sort keys %table) {
    9     print "$country: ";
   10     my @cities = @{$table{$country}};
   11     print join ', ', sort @cities;
   12     print ".\n";
   13	}

В программе две части: Строки 2—7 считывают данные и создают 
структуры данных, а строки 8—13 анализируют данные и распечатывают отчет.
Мы получаем хэш  C<%table>, ключи которого — названия стран, а значения — 
ссылки на массивы названий городов. Данная
структура будет выглядеть следующим образом:


           %table
        +-------+---+
        |       |   |   +-----------+--------+
        |Germany| *---->| Frankfurt | Berlin |
        |       |   |   +-----------+--------+
        +-------+---+
        |       |   |   +----------+
        |Finland| *---->| Helsinki |
        |       |   |   +----------+
        +-------+---+
        |       |   |   +---------+------------+----------+
        |  USA  | *---->| Chicago | Washington | New York |
        |       |   |   +---------+------------+----------+
        +-------+---+

Рассмотрим сначала вывод. Предположим, что у нас уже есть эта структура, как ее распечатать?

    8   foreach $country (sort keys %table) {
    9     print "$country: ";
   10     my @cities = @{$table{$country}};
   11     print join ', ', sort @cities;
   12     print ".\n";
   13	}

%table — обычный хэш, и мы получаем список его ключей, которые, как обычно, сортируем и перебираем. Единственное использование ссылки в строке 10. $table{$country} ищет в хэше ключ $country и получает значение — ссылку на массив городов этой страны. По Правилу использования 1 мы можем получить массив обратно используя конструкцию @{$table{$country}}. Строка 10 равносильна такой конструкции:
C<%table> is an
ordinary hash, and we get a list of keys from it, sort the keys, and
loop over the keys as usual.  The only use of references is in line 10.
C<$table{$country}> looks up the key C<$country> in the hash
and gets the value, which is a reference to an array of cities in that country.
B<Use Rule 1> says that
we can recover the array by saying
C<@{$table{$country}}>.  Line 10 is just like

	@cities = @array;

except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The C<@> tells Perl to get the entire array.
Having gotten the list of cities, we sort it, join it, and print it
out as usual.

Lines 2-7 are responsible for building the structure in the first
place.  Here they are again:

    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @{$table{$country}}, $city;
    7   }

Lines 2-4 acquire a city and country name.  Line 5 looks to see if the
country is already present as a key in the hash.  If it's not, the
program uses the C<[]> notation (B<Make Rule 2>) to manufacture a new,
empty anonymous array of cities, and installs a reference to it into
the hash under the appropriate key.

Line 6 installs the city name into the appropriate array.
C<$table{$country}> now holds a reference to the array of cities seen
in that country so far.  Line 6 is exactly like

	push @array, $city;

except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The C<push> adds a city name to the end of the
referred-to array.

There's one fine point I skipped.  Line 5 is unnecessary, and we can
get rid of it.

    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5   ####  $table{$country} = [] unless exists $table{$country};
    6     push @{$table{$country}}, $city;
    7   }

If there's already an entry in C<%table> for the current C<$country>,
then nothing is different.  Line 6 will locate the value in
C<$table{$country}>, which is a reference to an array, and push
C<$city> into the array.  But
what does it do when
C<$country> holds a key, say C<Greece>, that is not yet in C<%table>?

This is Perl, so it does the exact right thing.  It sees that you want
to push C<Athens> onto an array that doesn't exist, so it helpfully
makes a new, empty, anonymous array for you, installs it into
C<%table>, and then pushes C<Athens> onto it.  This is called
'autovivification'--bringing things to life automatically.  Perl saw
that the key wasn't in the hash, so it created a new hash entry
automatically. Perl saw that you wanted to use the hash value as an
array, so it created a new empty array and installed a reference to it
in the hash automatically.  And as usual, Perl made the array one
element longer to hold the new city name.

=head1 The Rest

I promised to give you 90% of the benefit with 10% of the details, and
that means I left out 90% of the details.  Now that you have an
overview of the important parts, it should be easier to read the
L<perlref> manual page, which discusses 100% of the details.

Some of the highlights of L<perlref>:

=over 4

=item *

You can make references to anything, including scalars, functions, and
other references.

=item *

In B<Use Rule 1>, you can omit the curly brackets whenever the thing
inside them is an atomic scalar variable like C<$aref>.  For example,
C<@$aref> is the same as C<@{$aref}>, and C<$$aref[1]> is the same as
C<${$aref}[1]>.  If you're just starting out, you may want to adopt
the habit of always including the curly brackets.

=item *

This doesn't copy the underlying array:

        $aref2 = $aref1;

You get two references to the same array.  If you modify
C<< $aref1->[23] >> and then look at
C<< $aref2->[23] >> you'll see the change.

To copy the array, use

        $aref2 = [@{$aref1}];

This uses C<[...]> notation to create a new anonymous array, and
C<$aref2> is assigned a reference to the new array.  The new array is
initialized with the contents of the array referred to by C<$aref1>.

Similarly, to copy an anonymous hash, you can use

        $href2 = {%{$href1}};

=item *

To see if a variable contains a reference, use the C<ref> function.  It
returns true if its argument is a reference.  Actually it's a little
better than that: It returns C<HASH> for hash references and C<ARRAY>
for array references.

=item *

If you try to use a reference like a string, you get strings like

	ARRAY(0x80f5dec)   or    HASH(0x826afc0)

If you ever see a string that looks like this, you'll know you
printed out a reference by mistake.

A side effect of this representation is that you can use C<eq> to see
if two references refer to the same thing.  (But you should usually use
C<==> instead because it's much faster.)

=item *

You can use a string as if it were a reference.  If you use the string
C<"foo"> as an array reference, it's taken to be a reference to the
array C<@foo>.  This is called a I<soft reference> or I<symbolic
reference>.  The declaration C<use strict 'refs'> disables this
feature, which can cause all sorts of trouble if you use it by accident.

=back

You might prefer to go on to L<perllol> instead of L<perlref>; it
discusses lists of lists and multidimensional arrays in detail.  After
that, you should move on to L<perldsc>; it's a Data Structure Cookbook
that shows recipes for using and printing out arrays of hashes, hashes
of arrays, and other kinds of data.

=head1 Summary

Everyone needs compound data structures, and in Perl the way you get
them is with references.  There are four important rules for managing
references: Two for making references and two for using them.  Once
you know these rules you can do most of the important things you need
to do with references.

=head1 Credits

Author: Mark Jason Dominus, Plover Systems (C<mjd-perl-ref+@plover.com>)

This article originally appeared in I<The Perl Journal>
( http://www.tpj.com/ ) volume 3, #2.  Reprinted with permission.

The original title was I<Understand References Today>.

=head2 Distribution Conditions

Copyright 1998 The Perl Journal.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun or for profit
as you see fit.  A simple comment in the code giving credit would be
courteous but is not required.

=cut

=head1 ПЕРЕВОДЧИКИ
 
=over
 
=item * Николай Мишин C<< <mi@ya.ru> >>

=item * Динар Жамалиев C<< <admin@perl5doc.ru> >> L<http://perl5doc.ru/perlreftut>

=item * Иван Рак C<< <rak@tut.by> >>

=back

